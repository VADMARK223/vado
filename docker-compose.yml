services:
  db:
    image: postgres:16
    container_name: vado_postgres
    restart: unless-stopped
    env_file:
      - vado_app.env.prod
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U vadmark -d vadodb" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data   # том для сохранения БД
      - ./data:/app/data   # монтируем локальную папку внутрь контейнера
      - ./db/init:/docker-entrypoint-initdb.d # SQL-скрипты при старте
    networks:
      - vado-network

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092" # для хоста
      - "29092:29092" # для Docker сети
    environment:
      # --- Kraft (без ZooKeeper) ---
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"

      # --- Listeners ---
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT

      # --- Общие настройки ---
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_HOURS: 168
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - vado-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092" ]
      interval: 10s
      timeout: 10s
      retries: 5

#  redpanda-console:
#    image: docker.redpanda.com/redpandadata/console:v3.2.2
#    container_name: redpanda-console
#    ports:
#      - "8080:8080"
#    environment:
#      - KAFKA_BROKERS=kafka:9092
#    depends_on:
#      kafka:
#        condition: service_healthy
#    networks:
#      - vado-network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: ""
    depends_on:
      - kafka
    networks:
      - vado-network

  app:
    container_name: vado_app
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy # app ждет healthcheck БД
      kafka:
        condition: service_healthy
    env_file:
      - vado_app.env.prod
    volumes:
      - ./data/app:/app/data/app   # Монтируем только подпапку app
    ports:
      - "5555:5556"   # если приложение слушает веб-порт
    networks:
      - vado-network

volumes:
  db_data:
  kafka_data:

networks:
  vado-network:
    driver: bridge